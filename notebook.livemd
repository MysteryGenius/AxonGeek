<!-- livebook:{"persist_outputs":true} -->

# Axonplay

## Introduction to Elixir

Elixir is a functional programming built on top of Erlang.

Elixir is successfully used in web development, embedded software, data ingestion, and multimedia processing, across a wide range of industries

Discord, Pinterest and PepsiCo have all used elixir to deploy low-latency, distributed, and fault-tolerant systems

```elixir
"Hello, World!"
```

```output
"Hello, World!"
```

In Object Oriented Programming, we model the world using metaphors and analogies

In Functional Programming, we take data and endlessly transform it to what we want

## Pipe Operator

<!-- livebook:{"livebook_object":"cell_input","name":"Name","reactive":true,"type":"text","value":"James"} -->

```elixir
name = IO.gets("Name: ")

name |> String.trim() |> String.upcase() |> String.downcase()
```

```output
"james"
```

## Immutability

Being built on top of Erlang means that Elixir will need to respect the immutability of data.

This not to say that variables cannot be reassigned it means that once a value is set its set

## JAX

JAX is Autograd and XLA, brought together for high-performance numerical computing and machine learning research. It provides composable transformations of Python+NumPy programs: differentiate, vectorize, parallelize, Just-In-Time compile to GPU/TPU, and more.

[JAX](https://jax.readthedocs.io/en/latest/) : Google's Research Project on combining XLA and autograd

[XLA](https://www.tensorflow.org/xla) : Accelerated Linear Algebra

[autograd](https://github.com/hips/autograd) : Efficiently computes derivatives of numpy code.

## Why talk about JAX

### Functional

![](images/Functional.png)

***

### Immutable

![](images/Immutable.png)

## Livebook

Livebook is where we will be working on!

* Shareable: notebooks are stored in the .livemd format, which is a subset of Markdown. This means your notebooks can be saved, easily shared, and play well with **version control**.

* Support for autocompletion, inline documentation, code formatting

* Livebook ensures your code runs in a predictable order, all the way down to package management. It also tracks your notebook state, annotating which parts are stale.

* Multiple users can work on the same notebook at once

## Project Time ðŸš€

We will be working on the MNIST dataset, a large database of handwritten digits that is commonly used for training various image processing systems

We will be creating the "Hello world" of the Machine Learning world

Using the dataset, we will create a ML that predict the number written

## Setting up

```elixir
Mix.install([
  {:axon, "~> 0.1.0-dev", github: "elixir-nx/axon", branch: "main"},
  {:exla, "~> 0.1.0-dev", github: "elixir-nx/nx", sparse: "exla", override: true},
  {:nx, "~> 0.1.0-dev", github: "elixir-nx/nx", sparse: "nx", override: true},
  {:scidata, "~> 0.1.1"}
])
```

```output
:ok
```

## Transformers

```elixir
require Axon

transform_images = fn {bin, type, shape} ->
  bin
  |> Nx.from_binary(type)
  |> Nx.reshape({elem(shape, 0), 784})
  |> Nx.divide(255.0)
  |> Nx.to_batched_list(32)
end

transform_labels = fn {bin, type, _} ->
  bin
  |> Nx.from_binary(type)
  |> Nx.new_axis(-1)
  |> Nx.equal(Nx.tensor(Enum.to_list(0..9)))
  |> Nx.to_batched_list(32)
end
```

```output
#Function<44.40011524/1 in :erl_eval.expr/5>
```

## Download MNIST Dataset

```elixir
{train_images, train_labels} =
  Scidata.MNIST.download(transform_images: transform_images, transform_labels: transform_labels)

train_images
|> hd()
|> Nx.slice_axis(0, 1, 0)
|> Nx.reshape({1, 28, 28})
|> Nx.to_heatmap()
```

```output
#Nx.Heatmap<
  f32[1][28][28]
  [
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
  ]
>
```

## Modal

```elixir
model =
  Axon.input({nil, 784})
  |> Axon.dense(128, activation: :relu)
  |> Axon.dropout()
  |> Axon.dense(10, activation: :softmax)
```

```output
--------------------------------------------------
                      Model
==================================================
 Layer                    Shape        Parameters
==================================================
 input_13 ( input )       {nil, 784}   0
 dense_16 ( dense )       {nil, 128}   100480
 relu_17 ( relu )         {nil, 128}   0
 dropout_18 ( dropout )   {nil, 128}   0
 dense_21 ( dense )       {nil, 10}    1290
 softmax_22 ( softmax )   {nil, 10}    0
--------------------------------------------------

```

## Training

```elixir
final_training_state =
  model
  |> Axon.Training.step(:categorical_cross_entropy, Axon.Optimizers.adamw(0.005),
    metrics: [:accuracy]
  )
  |> Axon.Training.train(train_images, train_labels, epochs: 10, compiler: EXLA, log_every: 100)
```

```output
Training model for 10 epochs
Metrics: [:accuracy]
Epoch 1, batch 1800 - Average Loss: 0.41112 - Average accuracy: 0.87141

Epoch 1 time: 15.482234s
Epoch 1 loss: 0.40358
Epoch 0 accuracy: 0.87402


Epoch 2, batch 1800 - Average Loss: 0.29934 - Average accuracy: 0.90936

Epoch 2 time: 13.632711s
Epoch 2 loss: 0.29536
Epoch 1 accuracy: 0.91092


Epoch 3, batch 1800 - Average Loss: 0.27505 - Average accuracy: 0.91729

Epoch 3 time: 13.645254s
Epoch 3 loss: 0.27238
Epoch 2 accuracy: 0.91842


Epoch 4, batch 1800 - Average Loss: 0.26598 - Average accuracy: 0.92128

Epoch 4 time: 14.570028s
Epoch 4 loss: 0.26168
Epoch 3 accuracy: 0.92253


Epoch 5, batch 1800 - Average Loss: 0.24560 - Average accuracy: 0.92618

Epoch 5 time: 14.211495s
Epoch 5 loss: 0.24339
Epoch 4 accuracy: 0.92717


Epoch 6, batch 1800 - Average Loss: 0.22956 - Average accuracy: 0.93108

Epoch 6 time: 13.817609s
Epoch 6 loss: 0.22716
Epoch 5 accuracy: 0.93190


Epoch 7, batch 1800 - Average Loss: 0.22274 - Average accuracy: 0.93311

Epoch 7 time: 13.748952s
Epoch 7 loss: 0.22066
Epoch 6 accuracy: 0.93403


Epoch 8, batch 1800 - Average Loss: 0.21930 - Average accuracy: 0.93405

Epoch 8 time: 13.651059s
Epoch 8 loss: 0.21689
Epoch 7 accuracy: 0.93492


Epoch 9, batch 1800 - Average Loss: 0.21500 - Average accuracy: 0.93727

Epoch 9 time: 13.413492s
Epoch 9 loss: 0.21234
Epoch 8 accuracy: 0.93813


Epoch 10, batch 1800 - Average Loss: 0.21046 - Average accuracy: 0.93701

Epoch 10 time: 14.164821s
Epoch 10 loss: 0.20807
Epoch 9 accuracy: 0.93812


Training finished
```

```output
%{
  epoch: 10,
  epoch_loss: 0.0,
  epoch_step: 0,
  metrics: %{accuracy: 0.0},
  optimizer_state: {%{
     count: #Nx.Tensor<
       s64
       18750
>,
     mu: %{
       "dense_16_bias" => #Nx.Tensor<
         f32[128]
         [-6.490239320555702e-5, 1.8759693193715066e-4, 4.1328129009343684e-4, 1.5505227202083915e-4, 0.006793104112148285, -8.913689271139447e-7, -1.1174732208019122e-5, 0.0038515913765877485, -4.645173248718493e-5, -3.327397280372679e-5, 5.582466255873442e-4, 0.0, 1.9795620755758137e-4, 3.850512803182937e-5, -3.641476796474308e-4, -4.918869235552847e-4, -6.27541885478422e-5, -8.143919985741377e-4, -1.1810777067466915e-7, -0.002980464603751898, 0.0015961449826136231, 2.6143974537262693e-5, 5.318588955560699e-5, 0.002601148560643196, 0.0, -2.7817825321108103e-4, 1.9002181943506002e-4, 3.8526547723449767e-4, 0.0, -0.0026917641516774893, 0.00456542382016778, 0.005012445617467165, -0.0015762915136292577, 1.5116042050067335e-4, -0.0018830602057278156, -2.5164103135466576e-5, 0.0027235103771090508, -2.114929084200412e-4, 8.473219932056963e-4, 3.3247713872697204e-5, 6.998056778684258e-4, ...]
>,
       "dense_16_kernel" => #Nx.Tensor<
         f32[784][128]
         [
           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...],
           ...
         ]
>,
       "dense_21_bias" => #Nx.Tensor<
         f32[10]
         [0.004844051785767078, -5.879475502297282e-4, -0.00122141744941473, -0.003443096997216344, -0.0048762294463813305, -0.003588784718886018, 0.0015664745587855577, 0.008343616500496864, 0.0021380193065851927, -0.0031746861059218645]
>,
       "dense_21_kernel" => #Nx.Tensor<
         f32[128][10]
         [
           [-1.2502485333243385e-5, -0.002614538185298443, 0.0026115961372852325, -7.361227180808783e-4, 3.197917540092021e-4, 1.2131981929996982e-4, 1.1966099555138499e-4, 2.7653561119223014e-5, 1.5329502639360726e-4, 9.842973668128252e-6],
           [1.925980905070901e-4, 0.0019434860441833735, 3.2203897717408836e-4, 1.6025012882892042e-5, 2.2811918825027533e-5, 3.9652273699175566e-5, -1.9307401089463383e-4, -0.0032574969809502363, 8.427247521467507e-4, 7.123246905393898e-5],
           [0.0014914560597389936, 8.526159945176914e-6, 1.9872726988978684e-4, 3.281892350059934e-5, 2.5921055566868745e-5, 4.4387555681169033e-4, 2.5137627744697966e-5, 9.458205022383481e-5, 2.735049638431519e-4, -0.0025945452507585287],
           [3.672100865514949e-5, -8.36146718938835e-5, 3.780178667511791e-4, 0.00108789571095258, -4.583618720062077e-4, -0.0024511595256626606, 1.1795984755735844e-4, 3.057255162275396e-5, ...],
           ...
         ]
>
     },
     nu: %{
       "dense_16_bias" => #Nx.Tensor<
         f32[128]
         [4.7678891860414296e-5, 2.9264216209412552e-5, 2.1408182874438353e-5, 4.2436506191734225e-5, 3.35162112605758e-5, 6.686109827569453e-6, 3.713660771609284e-5, 3.3394117053830996e-5, 5.6444117944920436e-5, 2.426752143946942e-5, 2.5218792870873585e-5, 5.467990697814035e-15, 2.213984407717362e-5, 4.559762237477116e-5, 2.9044687835266814e-5, 2.1737811039201915e-5, 4.7578945668647066e-5, 4.1979426896432415e-5, 1.232862541655777e-5, 5.116474494570866e-5, 2.8623298931051977e-5, 2.7331687306286767e-5, 4.9074209528043866e-5, 4.5738222979707643e-5, 2.4303994282598787e-14, 2.8626292987610213e-5, 3.016148002643604e-5, 2.9542905394919217e-5, 7.589787901895323e-16, 3.2484302209923044e-5, 6.619238411076367e-5, 3.5950197343481705e-5, 5.916962254559621e-5, 2.0924873751937412e-5, 3.7489706301130354e-5, 4.697033728007227e-5, 3.7888243241468444e-5, 2.6073787012137473e-5, 6.395496893674135e-5, 3.1784958991920575e-5, ...]
>,
       "dense_16_kernel" => #Nx.Tensor<
         f32[784][128]
         [
           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...],
           ...
         ]
>,
       "dense_21_bias" => #Nx.Tensor<
         f32[10]
         [1.8126159557141364e-4, 1.6586708079557866e-4, 3.32107039866969e-4, 3.559404576662928e-4, 3.143210196867585e-4, 3.3621452166698873e-4, 2.0589017367456108e-4, 2.6884980616159737e-4, 4.183502751402557e-4, 4.1532714385539293e-4]
>,
       "dense_21_kernel" => #Nx.Tensor<
         f32[128][10]
         [
           [5.693332423106767e-5, 0.0018267951672896743, 0.0019266606541350484, 0.0020736311562359333, 6.438491400331259e-4, 2.2875257127452642e-4, 4.0272550540976226e-4, 8.99129023309797e-4, 2.590430958662182e-4, 2.540391869843006e-4],
           [2.5677749363239855e-5, 8.181485463865101e-4, 8.067496673902497e-5, 1.2240126670803875e-4, 0.0010504116071388125, 2.9544386779889464e-4, 9.35348856728524e-4, 8.217302820412442e-5, 3.3384261769242585e-4, 1.1873555195052177e-4],
           [8.882186957634985e-4, 3.0228009109123377e-6, 4.778051225002855e-4, 3.517053846735507e-5, 4.5065597078064457e-5, 1.1321683268761262e-4, 4.1737628635019064e-4, 2.3255616542883217e-4, 5.4101670684758574e-5, 9.114819840760902e-5],
           [7.1885274337546434e-6, 5.084490476292558e-5, 1.8881427240557969e-4, 5.208368529565632e-4, 3.273198672104627e-5, 1.5463166346307844e-4, 3.360169102961663e-6, ...],
           ...
         ]
>
     }
   }},
  params: %{
    "dense_16_bias" => #Nx.Tensor<
      f32[128]
      [-0.6736562252044678, -0.6346412301063538, -0.6864270567893982, -0.925155520439148, 0.8091825246810913, 0.027153076604008675, -0.3086322247982025, 0.27728649973869324, 0.3803103566169739, 0.251086562871933, 0.04938684403896332, -0.03822701796889305, -1.2019163370132446, 0.016338888555765152, -0.6416853070259094, -0.02866264246404171, 0.14030568301677704, 0.16270504891872406, 0.22411566972732544, 0.1802838146686554, 0.4865351915359497, -0.5049048066139221, -0.09012472629547119, 0.1961616426706314, -0.04585636407136917, -0.1842091977596283, -1.02671480178833, -0.6590656638145447, -0.026683833450078964, -0.646579384803772, -0.9846213459968567, -0.20927929878234863, 0.13526539504528046, 0.7232661843299866, -1.2391979694366455, -0.8106144666671753, -0.570672333240509, -0.29945117235183716, -0.12614628672599792, 0.24175618588924408, 0.20464123785495758, -0.47684064507484436, -0.8385410308837891, ...]
>,
    "dense_16_kernel" => #Nx.Tensor<
      f32[784][128]
      [
        [0.014907295815646648, -0.015235621482133865, 0.05509063974022865, 0.0668826699256897, -0.08003339171409607, 0.05844666436314583, -0.03907179832458496, -0.04809858649969101, -0.05232270807027817, 0.06346791237592697, 0.032409559935331345, -0.04200230538845062, -0.0428830087184906, 0.07721591740846634, 0.020119238644838333, 0.020679179579019547, 0.03179788962006569, 0.06262089312076569, -0.06501629203557968, 0.046073537319898605, -0.07944019138813019, 0.03147023916244507, -0.061953336000442505, -0.03626227006316185, 0.006897681392729282, 0.03025815449655056, -0.048757441341876984, 0.05728938430547714, 0.06902649253606796, -0.009619508869946003, -0.028882795944809914, 0.021583013236522675, -0.033884238451719284, -0.007954809814691544, -0.05437605082988739, 0.036581508815288544, -0.03754093870520592, 0.007413376122713089, 0.049700379371643066, -0.06608101725578308, -0.06239837035536766, 0.008540644310414791, ...],
        ...
      ]
>,
    "dense_21_bias" => #Nx.Tensor<
      f32[10]
      [0.7348809838294983, -0.664713442325592, -0.9607345461845398, -0.43790796399116516, -0.3123522698879242, -0.791520357131958, -0.0296969972550869, -1.3631311655044556, 2.674177885055542, 0.4360416829586029]
>,
    "dense_21_kernel" => #Nx.Tensor<
      f32[128][10]
      [
        [-0.4726612865924835, 0.13902272284030914, 0.0976400226354599, 0.12747928500175476, 0.11136417090892792, -0.6515727043151855, -0.19758561253547668, -0.00229343818500638, -0.3969036340713501, -0.23121041059494019],
        [-0.34009024500846863, 0.34135764837265015, -0.2784998416900635, -0.19428527355194092, 0.12277721613645554, -0.19984295964241028, 0.19946961104869843, -0.10408751666545868, -0.11450919508934021, -0.4802754819393158],
        [0.19332268834114075, -0.35737523436546326, 0.031246662139892578, -0.838760495185852, -0.17447207868099213, -0.3398291766643524, 0.018447574228048325, -0.11933021992444992, -0.6065815687179565, -0.28258538246154785],
        [-0.6850372552871704, -0.19875647127628326, -0.11720609664916992, 0.3466798961162567, -0.08592624962329865, -0.18877145648002625, -0.6098746657371521, -0.077156662940979, -0.07483059167861938, -0.2953625023365021],
        ...
      ]
>
  }
}
```

## Prediction

```elixir
test_images = train_images |> hd() |> Nx.slice_axis(10, 3, 0)

test_images[1]
|> Nx.reshape({1, 28, 28})
|> Nx.to_heatmap()
```

```output
#Nx.Heatmap<
  f32[1][28][28]
  [
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
    ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€ã€€
  ]
>
```

```elixir
prediction =
  model
  |> Axon.predict(final_training_state[:params], test_images)
  |> Nx.argmax(axis: -1)

prediction[1]
```

```output
#Nx.Tensor<
  s64
  5
>
```
